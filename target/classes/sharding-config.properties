# 分表配置示例
# 在 application.properties 中添加以下配置项

# 是否启用分表功能 (true=启用, false=禁用)
sharding.enabled=true

# 是否自动创建分表 (true=自动创建, false=手动创建)
# 当设置为true时，系统会在启动时自动检查并创建不存在的分表
# 当设置为false时，需要手动创建分表或使用ShardingManager工具
sharding.auto.create=true

# 是否启用自动检测分表 (true=启用, false=禁用)
# 当设置为true时，系统会自动检测包含特定关键字的表并启用分表
# 当设置为false时，只有在sharding.tables列表中的表才会启用分表
sharding.auto.detect=false

# 启用分表的表名列表（逗号分隔）
# 只有当 sharding.enabled=true 时此配置才生效
sharding.tables=blade_role,blade_user,user_message

# 分表配置
blade_user.sharding.field=createTime
blade_user.sharding.strategy=hash

blade_role.sharding.field=createTime
blade_role.sharding.strategy=time

# 跨表分表配置示例：消息表根据用户ID分表
user_message.sharding.field=userId
user_message.sharding.strategy=hash
user_message.sharding.cross.table=blade_user.id->user_id

# 启用分表的表名列表（逗号分隔）
# 只有当 sharding.enabled=true 时此配置才生效
# 如果不需要分表功能，请将 sharding.enabled 设置为 false

# 示例：启用分表时的配置
# sharding.enabled=true
# sharding.tables=user_log,order_record,system_history

# 分表配置格式: tableName.sharding.field=字段名
# 分表配置格式: tableName.sharding.strategy=策略名

# 用户日志表分表配置
# user_log.sharding.field=createTime
# user_log.sharding.strategy=time

# 订单记录表分表配置  
# order_record.sharding.field=orderId
# order_record.sharding.strategy=hash

# 系统历史表分表配置
# system_history.sharding.field=recordDate
# system_history.sharding.strategy=time

# 分表策略说明:
# time - 按时间分表（按月）
# hash - 哈希分表（取模）
# range - 范围分表（数值范围）

# 跨表分表说明:
# 格式：tableName.sharding.cross.table=referenceTable.referenceField->targetField
# 说明：根据参考表的字段值来获取目标字段值进行分表
# 示例：user_message.sharding.cross.table=blade_user.id->user_id
#      表示根据blade_user表的id字段值来获取user_message表中对应记录的user_id字段值进行分表
#      这样可以确保同一用户的消息都存储在同一个分表中

# 跨表分表使用场景:
# 1. 用户消息表按用户ID分表：user_message.sharding.cross.table=blade_user.id->user_id
# 2. 订单详情表按订单ID的用户ID分表：order_detail.sharding.cross.table=order.user_id->user_id
# 3. 用户积分记录按用户ID分表：user_points.sharding.cross.table=blade_user.id->user_id
